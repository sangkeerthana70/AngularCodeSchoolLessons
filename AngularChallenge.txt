1-Create a Module named gemStore so we can get started on this
marketing journey.

2-Update the app.js file to create an Angular Module named
gemStore.
var app = angular.module('gemStore', []);
3-Attach the gemStore module to our HTML page with a Directive.

In the index.html file, add the ng-app directive to the html tag.
<html ng-app= "gemStore">

4-In index.html, create a simple Expression to display a friendly "Hello, Angular!" message.
<body>
    <h1>{{"Hello, Angular!"}}</h1>
</body>

CONTROLLERS
Controllers are where we define our app's behavior by defining 
functions and values.

In app.js, we've added a gem object to represent one of the
products in our gemStore. Assign it to the product property
of StoreController so we can use them in the page.


In order to add some behavior to our application, we need a 
controller. Add a controller named StoreController to our
gemStore application.
1-5 Add a controller named StoreController to our gemStore 
application.
2-5 Attach the StoreController to the <body> tag. Be sure to alias it as store.
Attach the controller to the body tag.
<body ng-controller="StoreController as store">
3-5In app.js, set the product in the controller.
this.product = gem;
4-5Display the name of the product inside the <h3> tag.
<h3>{{store.product.name}}
    <em class="pull-right">{{store.product.price}}</em>
</h3>

 Built-in Directives
 Use a directive to ensure that we can only see the "Add to Cart"
 button if the canPurchase property is true.
 <button ng-show="store.product.canPurchase">Add to Cart</button>
task 2/2
Our first gem is so popular that we've run out of stock already!
Well, Flatlander gems are pretty rare, so it shouldn't be a big
surprise. Luckily there is a soldOut property to our gem. When 
a gem is soldOut, hide the .product element.
<div ng-hide="store.product.soldOut" class="product row">

Look, More Gems! 
task1/2 In the app.js file we changed things up a little with a
new gems array. Assign gems to a products property inside
StoreController.
app.controller('StoreController', function(){
    this.products = gems;
  });
task 2/2
You know how to display all the products, don't you? Use the 
correct directive to display all the products in product row 
divs.
<div ng-repeat="product in store.products" class="product row">

